// src/Components/EmployeeSalaryTable.jsx
import React, { useState, useEffect } from "react";
import { collection, getDocs, query, orderBy, where } from "firebase/firestore";
import { db } from "../Services/firebaseConfig";
import ActivityIndicator from "./ActivityIndicator";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import logo from "../assets/logo.png"; // Ensure logo is a Base64 string or accessible format

// Helper function to get previous month in "YYYY-MM" format.
const getLastMonthString = () => {
  const today = new Date();
  // Create a new date for the first day of the current month, then subtract one month.
  const lastMonthDate = new Date(today.getFullYear(), today.getMonth(), 1);
  return lastMonthDate.toISOString().slice(0, 7); // e.g., "2025-02"
};

const EmployeeSalaryModal = ({ employee, salaryDetails, onClose }) => {
  // Export PDF function using jsPDF & autoTable.
  const handleExportPDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    // --- Header ---
    doc.setFillColor(70, 130, 180); // Steel blue.
    doc.rect(0, 0, pageWidth, 40, "F");
    // Add logo (adjust dimensions if needed)
    doc.addImage(logo, "PNG", 10, 5, 30, 30);
    // Title
    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.setTextColor(255, 255, 255);
    doc.text("Salary Details Report", pageWidth / 2, 25, { align: "center" });

    // --- Employee Details ---
    let y = 50;
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.setTextColor(0);
    doc.text(`Employee Name: ${employee.name}`, 14, y);
    y += 8;
    doc.text(`CNIC: ${employee.cnic || "N/A"}`, 14, y);
    y += 8;
    doc.text(`Joining Date: ${employee.joiningDate || "N/A"}`, 14, y);
    y += 8;
    doc.text(`Role: ${employee.role}`, 14, y);
    y += 8;
    doc.text(`Base Salary: RS ${employee.salary}`, 14, y);
    y += 10;
    // Separator line
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.5);
    doc.line(14, y, pageWidth - 14, y);
    y += 6;

    // --- Salary Details Table via autoTable ---
    const columns = [
      { header: "Month", dataKey: "month" },
      { header: "Effective Leave Days", dataKey: "effectiveLeaveDays" },
      { header: "Deduction", dataKey: "deduction" },
      { header: "Effective Salary", dataKey: "effectiveSalary" },
      { header: "Leave Dates", dataKey: "leaveDates" },
    ];
    const tableData = salaryDetails.map((s) => ({
      month: s.month,
      effectiveLeaveDays: s.effectiveLeaveDays,
      deduction: `RS ${Number(s.deduction).toFixed(2)}`,
      effectiveSalary: `RS ${Number(s.effectiveSalary).toFixed(2)}`,
      leaveDates:
        s.selectedLeaveDates && s.selectedLeaveDates.length > 0
          ? s.selectedLeaveDates.join(", ")
          : "N/A",
    }));

    autoTable(doc, {
      startY: y,
      head: [columns.map((col) => col.header)],
      body: tableData.map((row) => columns.map((col) => row[col.dataKey])),
      styles: { font: "helvetica", fontSize: 10 },
      headStyles: { fillColor: [230, 230, 230] },
      theme: "grid",
      margin: { left: 14, right: 14 },
    });

    // --- Footer ---
    doc.setFontSize(10);
    doc.setTextColor(128);
    doc.text(
      "Generated by Taimoor Nasir",
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: "center" }
    );

    const fileName = `${employee.name.replace(/\s+/g, "_")}_SalaryDetails.pdf`;
    doc.save(fileName);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-60 z-50">
      <div className="bg-white rounded-lg shadow-2xl p-6 w-11/12 md:max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center border-b pb-3 mb-4">
          <h3 className="text-2xl font-bold text-gray-800">
            {employee.name} - Salary Details
          </h3>
          <button
            onClick={onClose}
            className="text-red-500 text-3xl leading-none focus:outline-none"
          >
            &times;
          </button>
        </div>
        <div className="mb-6">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <p>
              <span className="font-semibold">CNIC:</span>{" "}
              {employee.cnic || "N/A"}
            </p>
            <p>
              <span className="font-semibold">Joining Date:</span>{" "}
              {employee.joiningDate || "N/A"}
            </p>
            <p>
              <span className="font-semibold">Role:</span> {employee.role}
            </p>
            <p>
              <span className="font-semibold">Base Salary:</span> RS {employee.salary}
            </p>
          </div>
        </div>
        <div>
          <h4 className="text-xl font-semibold mb-3">Monthly Salary Details</h4>
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white border border-gray-300 rounded">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border px-3 py-1 text-left">Month</th>
                  <th className="border px-3 py-1 text-left">Effective Leave Days</th>
                  <th className="border px-3 py-1 text-left">Deduction</th>
                  <th className="border px-3 py-1 text-left">Effective Salary</th>
                  <th className="border px-3 py-1 text-left">Leave Dates</th>
                </tr>
              </thead>
              <tbody>
                {salaryDetails.length > 0 ? (
                  salaryDetails.map((s, idx) => (
                    <tr key={idx} className="hover:bg-gray-100">
                      <td className="border px-3 py-1">{s.month}</td>
                      <td className="border px-3 py-1">{s.effectiveLeaveDays}</td>
                      <td className="border px-3 py-1">
                        RS {Number(s.deduction).toFixed(2)}
                      </td>
                      <td className="border px-3 py-1">
                        RS {Number(s.effectiveSalary).toFixed(2)}
                      </td>
                      <td className="border px-3 py-1">
                        {s.selectedLeaveDates && s.selectedLeaveDates.length > 0
                          ? s.selectedLeaveDates.join(", ")
                          : "N/A"}
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td className="border px-3 py-1 text-center" colSpan="5">
                      No salary details available.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
        <div className="mt-6 flex justify-end space-x-4">
          <button
            onClick={handleExportPDF}
            className="bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600 transition-colors focus:outline-none"
          >
            Export PDF
          </button>
          <button
            onClick={onClose}
            className="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600 transition-colors focus:outline-none"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

const EmployeeSalaryTable = () => {
  const [employees, setEmployees] = useState([]);
  const [lastMonthSalaries, setLastMonthSalaries] = useState({}); // { employeeId: effectiveSalary }
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [salaryDetails, setSalaryDetails] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);

  // Fetch employees from Firestore.
  useEffect(() => {
    const fetchEmployees = async () => {
      try {
        const snapshot = await getDocs(collection(db, "employees"));
        const employeeData = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setEmployees(employeeData);
        setLoading(false);

        const lastMonth = getLastMonthString(); // e.g., "2025-02"
        // For each employee, query the salary record for the previous month.
        employeeData.forEach(async (emp) => {
          const salaryRef = collection(db, "employees", emp.id, "salaries");
          const q = query(salaryRef, where("month", "==", lastMonth));
          const salarySnapshot = await getDocs(q);
          if (!salarySnapshot.empty) {
            const lastMonthSalary = salarySnapshot.docs[0].data();
            setLastMonthSalaries((prev) => ({
              ...prev,
              [emp.id]: lastMonthSalary.effectiveSalary,
            }));
          }
        });
      } catch (error) {
        console.error("Error fetching employees:", error);
      }
    };

    fetchEmployees();
  }, []);

  if (loading) {
    return <ActivityIndicator message="Loading ..." />;
  }

  // Handler for opening the details modal.
  const handleViewDetails = async (employee) => {
    try {
      const salaryRef = collection(db, "employees", employee.id, "salaries");
      const q = query(salaryRef, orderBy("month", "asc"));
      const salarySnapshot = await getDocs(q);
      const details = salarySnapshot.docs.map((doc) => doc.data());
      setSalaryDetails(details);
      setSelectedEmployee(employee);
      setModalOpen(true);
    } catch (error) {
      console.error("Error fetching salary details:", error);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Employee Salary Overview</h2>
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border border-gray-300 rounded-lg shadow">
          <thead>
            <tr className="bg-gray-200">
              <th className="border px-3 py-2 text-left">ID</th>
              <th className="border px-3 py-2 text-left">Name</th>
              <th className="border px-3 py-2 text-left">Base Salary</th>
              <th className="border px-3 py-2 text-left">Last Month Salary</th>
              <th className="border px-3 py-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {employees.map((emp) => (
              <tr key={emp.id} className="hover:bg-gray-100">
                <td className="border px-3 py-2">{emp.id}</td>
                <td className="border px-3 py-2">{emp.name}</td>
                <td className="border px-3 py-2">RS {emp.salary}</td>
                <td className="border px-3 py-2">
                  {lastMonthSalaries[emp.id]
                    ? `RS ${Number(lastMonthSalaries[emp.id]).toFixed(2)}`
                    : "N/A"}
                </td>
                <td className="border px-3 py-2">
                  <button
                    onClick={() => handleViewDetails(emp)}
                    className="bg-blue-500 text-white px-4 py-1 rounded hover:bg-blue-600 transition-colors"
                  >
                    View Details
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Details Modal */}
      {modalOpen && selectedEmployee && (
        <EmployeeSalaryModal
          employee={selectedEmployee}
          salaryDetails={salaryDetails}
          onClose={() => setModalOpen(false)}
        />
      )}
    </div>
  );
};

export default EmployeeSalaryTable;
